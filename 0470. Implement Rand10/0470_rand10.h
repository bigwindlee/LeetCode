#pragma once

// The rand7() API is already defined for you.
// int rand7();
// @return a random integer in the range 1 to 7

/*
470. 用 Rand7() 实现 Rand10()
给定方法 rand7 可生成 [1,7] 范围内的均匀随机整数，试写一个方法 rand10 生成 [1,10] 范围内的均匀随机整数。
你只能调用 rand7() 且不能调用其他方法。请不要使用系统的 Math.random() 方法。
每个测试用例将有一个内部参数 n，即你实现的函数 rand10() 在测试时将被调用的次数。请注意，这不是传递给 rand10() 的参数。

思路分析：
本题的核心是要理解`7进制`。想象一个7进制的两位数，它的低位和高位都由Rand7()-1生成，那么它在[0, 48]范围内是均匀分布的；
它落在[0, 39]范围内的任何一个点也都是等概率的。
为什么是[0, 39]？因为要尽可能多的选取10的整数倍样本，然后对10取余数，其余的样本舍弃即可。
考虑样本[0, 39]可分成4组，每一组的低位分布在[0, 9]之间是等概率的，那么4组合并起来，低位分布在[0, 9]之间也是等概率的。

难点：
    要理解“7进制”、“均匀”、“等概率”。
*/
class Solution {
public:
    int rand10()
    {
        int r10;
        do {
            r10 = (rand7() - 1) * 7 + (rand7() - 1);
        } while (r10 > 39);
        return r10 % 10 + 1;
    }
};