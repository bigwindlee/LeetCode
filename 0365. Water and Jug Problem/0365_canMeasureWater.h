#pragma once
#include <numeric> // std::gcd 求最大公约数
using namespace std;

/* ---------------------------------------------------------------------------------------------------------------------------------
365. 水壶问题
有两个水壶，容量分别为 x 和 y 升。水的供应是无限的。确定是否有可能使用这两个壶准确得到 target 升。
你可以：
   ● 装满任意一个水壶
   ● 清空任意一个水壶
   ● 将水从一个水壶倒入另一个水壶，直到接水壶已满，或倒水壶已空。
*/

/* ---------------------------------------------------------------------------------------------------------------------------------
思路分析1：贝祖定理
对于任意两个整数 a 和 b，它们的最大公约数 gcd(a, b) 可以表示为这两个整数的线性组合：gcd(a,b) = ax + by
贝祖定理告诉我们，对于任意两个整数 a 和 b，存在整数 x 和 y 使得 ax + by 等于它们的最大公约数。如果 gcd(a, b) = d，那么任意 d 的倍数都可以表示为 ax + by 的形式。
如果用两个水壶的容量 x 和 y，能否得到 target 升水的问题就是在寻找一个方程 x*a + y*b = target 是否有解，这可以通过判断 target 是否是 gcd(x, y) 的倍数来决定。
*/

/* ---------------------------------------------------------------------------------------------------------------------------------
思路分析2：DFS暴搜
6个搜索方向：
    1）把 X 壶的水灌进 Y 壶，直至灌满或倒空；
    2）把 Y 壶的水灌进 X 壶，直至灌满或倒空；
    3）把 X 壶灌满；
    4）把 Y 壶灌满；
    5）把 X 壶倒空；
    6）把 Y 壶倒空。
*/
class Solution {
public:
    bool canMeasureWater(int x, int y, int target)
    {
        return x + y >= target && target % gcd(x, y) == 0;
    }
};