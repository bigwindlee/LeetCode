#pragma once
#include <vector>
using namespace std;

/*
75. 颜色分类
给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地 对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
必须在不使用库内置的 sort 函数的情况下解决这个问题。
你能想出一个仅使用常数空间的一趟扫描算法吗？
*/

/*
思路分析：
题目要求：仅使用常数空间的一趟扫描算法。
基本的思想很简单，就是一趟扫描，扫描过程中把0往前搬运，把2往后搬运。
通过2个指针p0和p2：
  ● p0指示0要被搬运的目的地，从0往右递增；
  ● p2指示2要被搬运的目的地，从n-1往左递减；
*/
class Solution {
public:
    void sortColors(vector<int>& nums)
    {
        int i = 0, p0 = 0, p2 = nums.size() - 1; // 双指针p0/p2
        while (i <= p2) { // i到达p2提前结束，因为p2之后全部是2了。
            if (nums[i] == 2) {
                // 此处i不能递增，因为交换过来的也许还是2；
                // 但p2在递减（不担心死循环），可保证搬过来一个非2，或者全2数组；
                // 这样也能保证i左边不会有2
                swap(nums[i], nums[p2--]);
            } else if (nums[i] == 0) {
                swap(nums[i++], nums[p0++]); // 把0交换到p0指示的位置；此处i要递增
            } else {
                ++i; // 遇见1，不会修改p0/p2的位置
            }
        }
    }
};
